#!python
import os
import sys
import subprocess

if sys.version_info < (3,):
    def decode_utf8(x):
        return x
else:
    import codecs

    def decode_utf8(x):
        return codecs.utf_8_decode(x)[0]

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target",
                      'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform",
                      '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'",
                      '', ['', 'windows', 'x11', 'linux', 'osx']))
opts.Add(EnumVariable('arch', "Compilation architecture",
                      'universal', ['universal', 'x86_64', 'arm64']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'bin/'))
opts.Add(PathVariable('target_name', 'The library name.',
                      '', PathVariable.PathAccept))
opts.Add(EnumVariable('plugin', 'Plugin to build', '', ['', 'gameanalytics']))

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/godot-headers/"
cpp_bindings_path = "godot-cpp/"
cpp_library = "libgodot-cpp"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit()

if env['plugin'] == '':
    print("No plugin selected.")
    quit()

if env['target_name'] == '':
    env['target_name'] = 'lib' + env['plugin']

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    cpp_library += '.osx'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-g', '-O2', '-std=c++17'])
    else:
        env.Append(CCFLAGS=['-g', '-O3', '-std=c++17'])
    if env['arch'] == 'universal':
        env.Append(CCFLAGS=['-arch', 'x86_64', '-arch', 'arm64'])
        env.Append(LINKFLAGS=['-arch', 'x86_64', '-arch', 'arm64'])
    else:
        env.Append(CCFLAGS=['-arch', env['arch']])
        env.Append(LINKFLAGS=['-arch', env['arch']])
    sdk_path = decode_utf8(subprocess.check_output(
        ["xcrun", "--sdk", "macosx", "--show-sdk-path"]).strip())
    env.Append(CCFLAGS=["-isysroot", sdk_path])
    env.Append(LINKFLAGS=["-isysroot", sdk_path])
    env.Append(LINKFLAGS=['-framework', 'CoreFoundation'])
    env.Append(LINKFLAGS=['-framework', 'Foundation'])
    env.Append(LINKFLAGS=['-framework', 'CoreServices'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    cpp_library += '.linux'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-fPIC', '-g3', '-Og', '-std=c++17'])
    else:
        env.Append(CCFLAGS=['-fPIC', '-g', '-O3', '-std=c++17'])

elif env['platform'] == "windows":
    env['target_path'] += 'win64/'
    cpp_library += '.windows'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV=os.environ)

    env.Append(CCFLAGS=['-DWIN32', '-D_WIN32', '-D_WINDOWS',
                        '-W3', '-GR', '-D_CRT_SECURE_NO_WARNINGS'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-EHsc', '-D_DEBUG', '-MDd'])
    else:
        env.Append(CCFLAGS=['-O2', '-EHsc', '-DNDEBUG', '-MD'])

if env['target'] in ('debug', 'd'):
    cpp_library += '.debug'
else:
    cpp_library += '.release'

cpp_library += '.' + env['arch']

# make sure our binding library is properly includes
env.Append(CPPPATH=['.', godot_headers_path, cpp_bindings_path + 'include/',
                    cpp_bindings_path + 'include/core/', cpp_bindings_path + 'include/gen/'])
env.Append(LIBPATH=[cpp_bindings_path + 'bin/', 'lib/'])
env.Append(LIBS=[cpp_library, "GameAnalytics", "curl", "crypto", "ssl"])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=[env['plugin'] + '/'])
sources = Glob(env['plugin'] + '/*.cpp')
sources.append(Glob(env['plugin'] + '/*.mm'))
sources.append(Glob(env['plugin'] + '/*.m'))

library = env.SharedLibrary(
    target=env['target_path'] + env['target_name'] + '_' + env['arch'], source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
